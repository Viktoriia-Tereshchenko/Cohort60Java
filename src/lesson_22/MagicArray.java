package lesson_22;

import java.util.Arrays;

public class MagicArray {
    int[] array; // null
    int cursor; // по умолчанию = 0 (по типу данных)

    // Методы, расширяющие функционал массива

    public MagicArray() {
        this.array = new int[10]; // [0, 0 ... 0]
    }

    public MagicArray(int[] array) {
        // Todo Homework
    }

    // Добавление в массив одного элемента
    void add(int value) {

        // Проверка! Есть ли свободное место во внутреннем массиве
        // Если места нет - нужно добавить место
        if (cursor == array.length) {
            // Расширить внутренний массив перед добавлением нового значения
            expandArray();
        }
        array[cursor] = value;
        cursor++;
    }

    // Динамическое расширение массива
    void expandArray() {
        System.out.println("Расширяем внутренний массив! Курсор равен = " + cursor);
        /*
        1. Создать новый массив бОльшего размера (в 2 раза больше)
        2. Переписать в новый массив все значения из старого (до курсора)
        3. Перебросить ссылку
         */

        // Shift + Alt + стрелки вверх / вниз для перемещения строк кода

        // 1
        int[] newArray = new int[array.length * 2];

        // 2
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i];
        }

        // 3 Перебрасываем ссылку. Переменная array хранит ссылку на "новый" массив
        array = newArray;
    }

    // Добавление в массив нескольких элементов
    // int... - это называется СИКВЕНЦИЯ (последовательность)
    void add(int... numbers) {
        // с numbers я могу обращаться точно также, как ссылкой на массив int
        //System.out.println("Принял несколько int: " + numbers.length);
        //System.out.println(Arrays.toString(numbers));
        //System.out.println("У каждого инта есть индекс, как в масcиве: " + numbers[0]);

        // Перебираю все значения. Для каждого вызываю метод add()
        for (int i = 0; i < numbers.length; i++) {
            add(numbers[i]);
        }
    }

    // Возвращает строковое представление массива
    // [5, 20, 45]
    public String toString() {

        if (cursor == 0) return "[]";

        String result = "["; // + 5 , + 25 , ...
        for (int i = 0; i < cursor; i++) {
            result += array[i] + (i < cursor - 1 ? ", " : "]");
        }
        return result;
    }

    // Текущее кол-во элементов в нашем массиве
    int size() {
        return cursor;
    }

    // Возвращает значение по индексу
    int get(int index) {
        // Проконтролировать входящий индекс!
        if (index >= 0 && index < cursor) {
            return array[index];
        }

        // Fixme Указать место в коде с ошибкой / проблемой
        // Код, если индекс не корректный
        // Хорошего решения нет
        return -2_147_483_647;
        // Todo Поправить обработку некорректного индекса
    }

    // Удалить элемент по индексу
    int remove(int index) {
        /*
        1. Проверка индекса на валидность
        2. Удалить значение по индексу
        3. Передвинуть курсор (т.к. кол-во элементов уменьшилось)
        4. Вернуть старое значение
        */

        if (index >= 0 && index < cursor) {
            // Логика удаления
            int value = array[index]; // запомнить старое значение

            // Перебираем элементы начиная с индекса и перезаписываем значения из ячейки справа
            for (int i = index; i < cursor - 1; i++) { // граница перебора индексов cursor - 1
                array[i] = array[i + 1];
            }
            cursor--;
            return value; // вернуть старое значение

        } else {
            // Индекс не валидный
            // Todo поправить возвращаемое значение
            return -2_147_483_647;
        }
    }

    // Поиск по значению
    // {1, 100, 5, 24, 0, 5} -> indexOf(5) = 2; indexOf(50) = -1;
    int indexOf(int value) {
        // Перебираю все значимые элементы
        // Если элемент равен искомому - вернуть индекс такого элемента
        // Если перебрал все элементы = не нашел совпадений - вернуть -1

        for (int i = 0; i < cursor; i++) {
            if (array[i] == value) {
                // Значения совпали. Возвращаю индекс
                return i;
            }
        }

        // Сюда попадем, если ни одно значение в массиве не совпало
        return  -1;
    }


    // Индекс последнего вхождения.
    // {1, 100, 5, 100, 24, 0, 100} -> lastIndexOf(100) -> 6
    int lastIndexOf(int value) {
        // Todo Homework

        //  находит первый элемент, запоминает и идет дальше искать до конца
        // если больше не нашли, то возвращаем первый
        // если нашли, то перезапоминаем индекс
        // доходим до конца и возвращаем, что в индексе
        return  -1;
    }


    // Удаление элемента по значению
    // Не дубриловать код !!!!!!!!!!!!!!!!!!! использовать сущ-е методы!!!!!!
    boolean removeByValue(int value){
        // Todo Homework
        return false;
    }

//    // {1, 100, 5, 100, 24, 0, 100}    // Todo Homework
//    int[] findAllValues(int value) {
//        // {1, 3, 6}
    //если ничего не нашел []
//        return
//    }

    // void removeAllValues(int value) // удалить все элементы с таким значением

    void test() {
        System.out.println(Arrays.toString(array));
    }
}

/*
1. Добавлять в массив элемент (не думаю об индексах, размере массива) ++
2. Динамическое изменение размера внутреннего массива ++
3. Возвратить строковое представление массива (все элементы массива в одной строке) ++
4. Добавить в массив сразу несколько значений ++
5. Текущее кол-во элементов в нашем массиве ++
6. Возвращает значение по индексу ++
7. Удалить элемент по индексу (есть индекс - удалить элемент из массива). Возвращает старое значение ++
    8. Удаление элемента по значению (первый по очереди). Возвращал boolean. Если удалил - true. Не нашел, что удалять - false
9. Поиск по значению. Возвращать индекс первого вхождения элемента ++
    10. Индекс последнего вхождения. Возвращать индекс последнего вхождения элемента
    11. Конструктор, принимающий обычный массив. Создать магический массив с элементами из этого массива
 */